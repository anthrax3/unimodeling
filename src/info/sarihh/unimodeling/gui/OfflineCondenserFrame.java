package info.sarihh.unimodeling.gui;

import com.rits.cloning.Cloner;
import info.sarihh.unimodeling.streamapi.OfflineCondenserTask;
import info.sarihh.unimodeling.streamapi.StreamSource;
import info.sarihh.unimodeling.utility.DatabaseConnectionFactory;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.DocumentFilter;

/**
 * This class creates the internal frame for the RFID server.
 * Author: Sari Haj Hussein
 */
public class OfflineCondenserFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form RFIDServerFrame
     */
    public OfflineCondenserFrame(UniModelingGUI uniModelingGUI) {
        this.unModeingGUI = uniModelingGUI;
        initComponents();
        driversComboBox.setSelectedIndex(1);
        registerStreamDialog.pack();
        connectDatabaseDialog.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        registerStreamDialog = new javax.swing.JDialog();
        infoScrollPane = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        streamEncodingScrollPane = new javax.swing.JScrollPane();
        streamEncodingTextArea = new javax.swing.JTextArea();
        buttonPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        connectDatabaseDialog = new javax.swing.JDialog();
        driversLabel = new javax.swing.JLabel();
        driversComboBox = new javax.swing.JComboBox();
        urlLabel = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        buttonPanel2 = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        buttonFiller5 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        okButton1 = new javax.swing.JButton();
        containerScrollPane = new javax.swing.JScrollPane();
        containerPanel = new javax.swing.JPanel();
        hashSizeLabel = new javax.swing.JLabel();
        hashSizeTextField = new javax.swing.JFormattedTextField(new DefaultFormatter() {
            private DocumentFilter portNumberFormatter = new info.sarihh.unimodeling.utility.NumberFieldFormatter(6);
            protected DocumentFilter getDocumentFilter() {
                return portNumberFormatter;
            }
        });
        activityLogScrollPane = new javax.swing.JScrollPane();
        activityLogTextArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        registerStreamButton = new javax.swing.JButton();
        connectDatabaseButton = new javax.swing.JButton();
        createAppearTableButton = new javax.swing.JButton();
        startCondensingButton = new javax.swing.JButton();
        endCondensingButton = new javax.swing.JButton();
        clearLogButton = new javax.swing.JButton();

        registerStreamDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("info/sarihh/unimodeling/gui/OfflineCondenserFrame"); // NOI18N
        registerStreamDialog.setTitle(bundle.getString("OfflineCondenserFrame.registerStreamDialog.title")); // NOI18N
        registerStreamDialog.setModal(true);
        registerStreamDialog.setResizable(false);
        registerStreamDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        infoScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        infoTextArea.setBackground(new java.awt.Color(212, 208, 200));
        infoTextArea.setColumns(45);
        infoTextArea.setEditable(false);
        infoTextArea.setLineWrap(true);
        infoTextArea.setRows(10);
        infoTextArea.setText("Specify a string encoding of the stream information in the form:\nregister stream S (obj-id varchar#reader-id integer#time timestamp#...)\nwhere S is the stream name and obj-id, reader-id, and time are attributes of types varchar, integer, and timestamp respectively.\nThe attributes obj-id, reader-id, and time are mandatory.\nThe first two attributes are used for indexing the in-memory hash structure.\nThe third attribute is used to enforce chronological ordering on stream tuples if possible.\nAn arbitrary number of additional attributes can be specified, and there are no restrictions on their types provided that they are supported by the DBMS that will store their values."); // NOI18N
        infoTextArea.setWrapStyleWord(true);
        infoTextArea.setCaretPosition(0);
        infoScrollPane.setViewportView(infoTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(infoScrollPane, gridBagConstraints);

        streamEncodingScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        streamEncodingTextArea.setColumns(45);
        streamEncodingTextArea.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        streamEncodingTextArea.setLineWrap(true);
        streamEncodingTextArea.setRows(6);
        streamEncodingTextArea.setText("register stream reading (license_plate varchar2(10 byte)#location_id number(20,0)#reading_ts timestamp(3))"); // NOI18N
        streamEncodingTextArea.setWrapStyleWord(true);
        streamEncodingScrollPane.setViewportView(streamEncodingTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(streamEncodingScrollPane, gridBagConstraints);

        okButton.setText(bundle.getString("OfflineCondenserFrame.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel1.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(buttonPanel1, gridBagConstraints);

        connectDatabaseDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        connectDatabaseDialog.setTitle(bundle.getString("OfflineCondenserFrame.connectDatabaseDialog.title")); // NOI18N
        connectDatabaseDialog.setModal(true);
        connectDatabaseDialog.setResizable(false);
        connectDatabaseDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        driversLabel.setText(bundle.getString("OfflineCondenserFrame.driversLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(driversLabel, gridBagConstraints);

        driversComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL Driver", "Oracle Thin Driver", "PostgreSQL Driver" }));
        driversComboBox.setPreferredSize(new java.awt.Dimension(360, 22));
        driversComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driversComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(driversComboBox, gridBagConstraints);

        urlLabel.setText(bundle.getString("OfflineCondenserFrame.urlLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(urlLabel, gridBagConstraints);

        urlTextField.setText("jdbc:mysql://<hostname>[,<failoverhost>][<:3306>]/<dbname>"); // NOI18N
        urlTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(urlTextField, gridBagConstraints);

        userNameLabel.setText(bundle.getString("OfflineCondenserFrame.userNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(userNameLabel, gridBagConstraints);

        userNameTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(userNameTextField, gridBagConstraints);

        passwordLabel.setText(bundle.getString("OfflineCondenserFrame.passwordLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(passwordLabel, gridBagConstraints);

        passwordTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(passwordTextField, gridBagConstraints);

        testButton.setText(bundle.getString("OfflineCondenserFrame.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        buttonPanel2.add(testButton);
        buttonPanel2.add(buttonFiller5);

        okButton1.setText(bundle.getString("OfflineCondenserFrame.okButton1.text")); // NOI18N
        okButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton1ActionPerformed(evt);
            }
        });
        buttonPanel2.add(okButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(buttonPanel2, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(bundle.getString("OfflineCondenserFrame.title")); // NOI18N

        containerPanel.setLayout(new java.awt.GridBagLayout());

        hashSizeLabel.setText(bundle.getString("OfflineCondenserFrame.hashSizeLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(hashSizeLabel, gridBagConstraints);

        hashSizeTextField.setText("1000"); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(hashSizeTextField, gridBagConstraints);

        activityLogScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("OfflineCondenserFrame.activityLogScrollPane.border.title"))); // NOI18N
        activityLogScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        activityLogTextArea.setColumns(40);
        activityLogTextArea.setEditable(false);
        activityLogTextArea.setLineWrap(true);
        activityLogTextArea.setRows(12);
        activityLogTextArea.setWrapStyleWord(true);
        activityLogScrollPane.setViewportView(activityLogTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        containerPanel.add(activityLogScrollPane, gridBagConstraints);

        registerStreamButton.setText(bundle.getString("OfflineCondenserFrame.registerStreamButton.text")); // NOI18N
        registerStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerStreamButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(registerStreamButton);

        connectDatabaseButton.setText(bundle.getString("OfflineCondenserFrame.connectDatabaseButton.text")); // NOI18N
        connectDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDatabaseButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(connectDatabaseButton);

        createAppearTableButton.setText(bundle.getString("OfflineCondenserFrame.createAppearTableButton.text")); // NOI18N
        createAppearTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAppearTableButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(createAppearTableButton);

        startCondensingButton.setText(bundle.getString("OfflineCondenserFrame.startCondensingButton.text")); // NOI18N
        startCondensingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCondensingButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(startCondensingButton);

        endCondensingButton.setText(bundle.getString("OfflineCondenserFrame.endCondensingButton.text")); // NOI18N
        endCondensingButton.setEnabled(false);
        endCondensingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endCondensingButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(endCondensingButton);

        clearLogButton.setText(bundle.getString("OfflineCondenserFrame.clearLogButton.text")); // NOI18N
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(clearLogButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(buttonPanel, gridBagConstraints);

        containerScrollPane.setViewportView(containerPanel);

        getContentPane().add(containerScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
    activityLogTextArea.setText("");
}//GEN-LAST:event_clearLogButtonActionPerformed

private void endCondensingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endCondensingButtonActionPerformed
    dbReadingFlag = false;
}//GEN-LAST:event_endCondensingButtonActionPerformed

private void startCondensingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCondensingButtonActionPerformed
    final ConcurrentHashMap<String, HashMap<String, String>> memoryMap = new ConcurrentHashMap<>();
    final OfflineCondenserTask condenserTask = new OfflineCondenserTask(this, memoryMap, Integer.parseInt(hashSizeTextField.getText()));
    dbReadingFlag = true;
    streamSource.start(conn);
    Thread dbReaderThread = new Thread() {

        @Override
        public void run() {
            try {
                HashMap<String, String> reading = new HashMap<>();
                switchButtonState(endCondensingButton, startCondensingButton);
                int counter = 0;
                while (streamSource.getNext(reading)) {
                    if (dbReadingFlag) {
                        counter++;
                        String objID = reading.get(streamSource.getObjIDAttributeName());
                        String readerID = reading.get(streamSource.getReaderIDAttributeName());
                        String searchKey = objID + "," + readerID;
                        if (memoryMap.containsKey(searchKey + ",START")) { // if the appearance record has started
                            memoryMap.put(objID + "," + readerID + ",END", reading); // end it
                        } else if (memoryMap.containsKey(searchKey + ",END")) { // if it has endedn
                            memoryMap.put(objID + "," + readerID + ",END", reading); // end it again
                        } else { // if it neither started not ended, then start it
                            memoryMap.put(objID + "," + readerID + ",START", reading);
                        }
                        condenserTask.setSearchKey(searchKey);
                        condenserTask.condense();
                        reading = new HashMap<>();
                    } else {
                        break;
                    }
                }
                streamSource.end();
                switchButtonState(startCondensingButton, endCondensingButton);
                appendLogText("The condensing ended.");
                appendLogText(counter + " readings were condensed.");
            } catch (Exception e) {
                e.printStackTrace();
                streamSource.end();
                switchButtonState(startCondensingButton, endCondensingButton);
            }
        }
    };
    dbReaderThread.start();
}//GEN-LAST:event_startCondensingButtonActionPerformed

private void registerStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerStreamButtonActionPerformed
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            registerStreamDialog.setLocationRelativeTo(OfflineCondenserFrame.this);
            registerStreamDialog.setVisible(true);
        }
    });
}//GEN-LAST:event_registerStreamButtonActionPerformed

private void connectDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDatabaseButtonActionPerformed
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            connectDatabaseDialog.setLocationRelativeTo(OfflineCondenserFrame.this);
            connectDatabaseDialog.setVisible(true);
        }
    });
}//GEN-LAST:event_connectDatabaseButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    String streamEncoding = streamEncodingTextArea.getText();
    streamSource.register(streamEncoding);
    registerStreamDialog.setVisible(false);
    appendLogText("The stream " + streamEncoding.substring(16) + " is registered.");
}//GEN-LAST:event_okButtonActionPerformed

private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
    conn = DatabaseConnectionFactory.getDatabaseConnection(
            driversComboBox.getSelectedItem().toString(), urlTextField.getText(),
            userNameTextField.getText(), new String(passwordTextField.getPassword()));
    if (conn != null) {
        JOptionPane.showMessageDialog(OfflineCondenserFrame.this,
                "Connection succeeded!",
                "UniModeling",
                JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(OfflineCondenserFrame.this,
                "Connection failed!",
                "UniModeling",
                JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_testButtonActionPerformed

private void okButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton1ActionPerformed
    conn = DatabaseConnectionFactory.getDatabaseConnection(
            driversComboBox.getSelectedItem().toString(), urlTextField.getText(),
            userNameTextField.getText(), new String(passwordTextField.getPassword()));
    if (conn != null) {
        appendLogText("A connection made with the database: "
                + urlTextField.getText() + " using driver: "
                + driversComboBox.getSelectedItem() + ".");
    } else {
        appendLogText("A connection failed with the database: "
                + urlTextField.getText() + " using driver: "
                + driversComboBox.getSelectedItem() + ".");
    }
    connectDatabaseDialog.setVisible(false);
}//GEN-LAST:event_okButton1ActionPerformed

private void createAppearTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAppearTableButtonActionPerformed
    createAppearTable();
}//GEN-LAST:event_createAppearTableButtonActionPerformed

private void driversComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driversComboBoxActionPerformed
    switch (driversComboBox.getSelectedIndex()) {
        case 0:
            urlTextField.setText("jdbc:mysql://<hostname>[,<failoverhost>][<:3306>]/<dbname>");
            userNameTextField.setText("");
            passwordTextField.setText("");
            break;
        case 1:
            urlTextField.setText("jdbc:oracle:thin:@<server>[:<1521>]:<database_name>");
            break;
        case 2:
            urlTextField.setText("jdbc:postgresql:[<//host>[:<5432>/]]<database>");
            userNameTextField.setText("");
            passwordTextField.setText("");
            break;
        default:
            break;
    }
}//GEN-LAST:event_driversComboBoxActionPerformed

    public void appendLogText(final String text) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (!text.equals("")) {
                    activityLogTextArea.append(dateFormat.format(new Date()) + " -> " + text + "\n");
                    activityLogTextArea.setCaretPosition(activityLogTextArea.getText().length());
                }
            }
        });
    }

    public StreamSource getStreamSource() {
        return streamSource;
    }

    public Connection getConnection() {
        return conn;
    }

    private void createAppearTable() {
        try {
            DatabaseMetaData meta = conn.getMetaData();
            ResultSet resultSet = null;
            String driver = driversComboBox.getSelectedItem().toString();
            if (driver.equals("Oracle Thin Driver")) {
                resultSet = meta.getTables(null, "BAGGAGEQUALITY", null, new String[]{"TABLE"});
            } else {
                resultSet = meta.getTables(null, null, null, new String[]{"TABLE"});
            }
            boolean exist = false;
            while (resultSet.next()) {
                if (resultSet.getString(3).equalsIgnoreCase("APPEAR_TABLE")) {
                    exist = true;
                    break;
                }
            }
            resultSet.close();

            if (!exist) {
                Cloner cloner = new Cloner();
                HashMap<String, String> streamEncodingMap = cloner.deepClone(streamSource.getStreamEncodingMap());
                String objIDAttributeName = streamSource.getObjIDAttributeName();
                String objIDAttributeType = streamEncodingMap.get(objIDAttributeName);
                String readerIDAttributeName = streamSource.getReaderIDAttributeName();
                String readerIDAttributeType = streamEncodingMap.get(readerIDAttributeName);
                String timeAttributeName = streamSource.getTimeAttributeName();
                streamEncodingMap.remove(objIDAttributeName); // we don't need them anymore in the map
                streamEncodingMap.remove(readerIDAttributeName);
                streamEncodingMap.remove(timeAttributeName);
                StringBuilder sb = new StringBuilder("CREATE TABLE APPEAR_TABLE (\n");
                sb.append(objIDAttributeName).append(" ").append(objIDAttributeType).append(",\n");
                sb.append(readerIDAttributeName).append(" ").append(readerIDAttributeType).append(",\n");
                for (String attributeName : streamEncodingMap.keySet()) {
                    sb.append(attributeName).append(" ").append(streamEncodingMap.get(attributeName)).append(",\n");
                }
                sb.append("S_TIME TIMESTAMP (6),\n");
                sb.append("E_TIME TIMESTAMP (6))");
                String query = sb.toString();
                Statement statement = conn.createStatement();
                statement.execute(query);
                statement.close();
                appendLogText("The table APPEAR_TABLE is created.");
            } else {
                appendLogText("The table APPEAR_TABLE already exists.");
            }
        } catch (SQLException e) {
            for (Throwable t : e) {
                t.printStackTrace();
            }
        }
    }

    private void switchButtonState(final JButton button1, final JButton button2) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                button1.setEnabled(true);
                button2.setEnabled(false);
            }
        });
    }
    private UniModelingGUI unModeingGUI = null;
    private static Connection conn = null;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private ServerSocket serverSocket;
    private ConcurrentHashMap<Socket, ObjectOutputStream> clientOutputStreams = new ConcurrentHashMap<>();
    private StreamSource streamSource = new StreamSource();
    private boolean dbReadingFlag = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane activityLogScrollPane;
    private static javax.swing.JTextArea activityLogTextArea;
    private javax.swing.Box.Filler buttonFiller5;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel buttonPanel1;
    private javax.swing.JPanel buttonPanel2;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JButton connectDatabaseButton;
    private javax.swing.JDialog connectDatabaseDialog;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JScrollPane containerScrollPane;
    private javax.swing.JButton createAppearTableButton;
    private javax.swing.JComboBox driversComboBox;
    private javax.swing.JLabel driversLabel;
    private javax.swing.JButton endCondensingButton;
    private javax.swing.JLabel hashSizeLabel;
    private javax.swing.JFormattedTextField hashSizeTextField;
    private javax.swing.JScrollPane infoScrollPane;
    private static javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton1;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton registerStreamButton;
    private javax.swing.JDialog registerStreamDialog;
    private javax.swing.JButton startCondensingButton;
    private javax.swing.JScrollPane streamEncodingScrollPane;
    private static javax.swing.JTextArea streamEncodingTextArea;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
