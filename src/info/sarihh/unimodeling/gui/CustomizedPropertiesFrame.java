package info.sarihh.unimodeling.gui;

import java.util.Arrays;
import com.tinkerpop.blueprints.impls.orient.OrientGraph;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import static info.sarihh.unimodeling.utility.GraphModeling.*;

/**
 * This class creates the internal frame for adding customized properties to the
 * vertices or edges of the RFID readers deployment pseudograph.
 * Author: Sari Haj Hussein
 */
public class CustomizedPropertiesFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form CustomizedPropertiesFrame
     */
    public CustomizedPropertiesFrame(UniModelingGUI uniModelingGUI) {
        this.unModeingGUI = uniModelingGUI;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        containerScrollPane = new javax.swing.JScrollPane();
        containerPanel = new javax.swing.JPanel();
        propertyNameLabel = new javax.swing.JLabel();
        propertyNameTextField = new javax.swing.JTextField();
        propertyOfLabel = new javax.swing.JLabel();
        propertyOfComboBox = new javax.swing.JComboBox();
        propertyValueLabel = new javax.swing.JLabel();
        propertyValueTextField = new javax.swing.JTextField();
        addPropertyValueButton = new javax.swing.JButton();
        propertyValuesScrollPane = new javax.swing.JScrollPane();
        propertyValuesList = new javax.swing.JList();
        removePropertyValueButton = new javax.swing.JButton();
        removeAllPropertyValuesButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("info/sarihh/unimodeling/gui/CustomizedPropertiesFrame"); // NOI18N
        setTitle(bundle.getString("CustomizedPropertiesFrame.title")); // NOI18N

        containerPanel.setLayout(new java.awt.GridBagLayout());

        propertyNameLabel.setText(bundle.getString("CustomizedPropertiesFrame.propertyNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyNameLabel, gridBagConstraints);

        propertyNameTextField.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyNameTextField, gridBagConstraints);

        propertyOfLabel.setText(bundle.getString("CustomizedPropertiesFrame.propertyOfLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyOfLabel, gridBagConstraints);

        propertyOfComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Vertices (Semantic Locations)", "Edges (Binary Sub-routes)" }));
        propertyOfComboBox.setPreferredSize(new java.awt.Dimension(250, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyOfComboBox, gridBagConstraints);

        propertyValueLabel.setText(bundle.getString("CustomizedPropertiesFrame.propertyValueLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyValueLabel, gridBagConstraints);

        propertyValueTextField.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyValueTextField, gridBagConstraints);

        addPropertyValueButton.setText("+"); // NOI18N
        addPropertyValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPropertyValueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(addPropertyValueButton, gridBagConstraints);

        propertyValuesList.setModel(new DefaultListModel());
        propertyValuesList.setVisibleRowCount(4);
        propertyValuesScrollPane.setViewportView(propertyValuesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(propertyValuesScrollPane, gridBagConstraints);

        removePropertyValueButton.setText("-"); // NOI18N
        removePropertyValueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePropertyValueButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(removePropertyValueButton, gridBagConstraints);

        removeAllPropertyValuesButton.setText("x"); // NOI18N
        removeAllPropertyValuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllPropertyValuesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(removeAllPropertyValuesButton, gridBagConstraints);

        addButton.setText(bundle.getString("CustomizedPropertiesFrame.addButton.text")); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(addButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(buttonPanel, gridBagConstraints);

        containerScrollPane.setViewportView(containerPanel);

        getContentPane().add(containerScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void addPropertyValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPropertyValueButtonActionPerformed
    includeInList(propertyValueTextField, propertyValuesList);
}//GEN-LAST:event_addPropertyValueButtonActionPerformed

private void removePropertyValueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePropertyValueButtonActionPerformed
    excludeFromList(propertyValuesList);
}//GEN-LAST:event_removePropertyValueButtonActionPerformed

private void removeAllPropertyValuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllPropertyValuesButtonActionPerformed
    clearList(propertyValuesList);
}//GEN-LAST:event_removeAllPropertyValuesButtonActionPerformed

private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            String rfidDBPath = unModeingGUI.getRFIDDeploymentModelingFrame().getRFIDDBPath();
            String rfidGraphmlFilePath = unModeingGUI.getRFIDDeploymentModelingFrame().getRFIDGraphmlFilePath();
            OrientGraph rfidGraph = createOrientGraph(rfidDBPath);
            String propertyName = propertyNameTextField.getText();
            String propertyOf = (String) propertyOfComboBox.getSelectedItem();
            String[] propertyValues = getListItems(propertyValuesList);
            addCustomizedProperty(rfidGraph, propertyName, propertyOf, propertyValues);
            saveGraphMLFile(rfidGraph, rfidGraphmlFilePath);
            shutdownGraph(rfidGraph);
        }
    });
}//GEN-LAST:event_addButtonActionPerformed

    /** This method includes the text from the specified text field in the
     * specified list, provided that it does not already exist. */
    private void includeInList(JTextField textField, JList list) {
        String text = textField.getText();
        DefaultListModel model = (DefaultListModel) list.getModel();
        if (!model.contains(text)) {
            model.addElement(text);
        }
    }

    /** This method excludes the selected items in the specified list. */
    private void excludeFromList(JList list) {
        DefaultListModel model = (DefaultListModel) list.getModel();
        List<Object> selectedValues = list.getSelectedValuesList();
        for (Object value : selectedValues) {
            model.removeElement(value);
        }
    }

    /** This method clears all items in the specified list. */
    private void clearList(JList list) {
        DefaultListModel model = (DefaultListModel) list.getModel();
        model.clear();
    }

    /** This method retrieves the items in the specified list in a string array. */
    private String[] getListItems(JList list) {
        DefaultListModel list_model = (DefaultListModel) list.getModel();
        Object[] objectArray = list_model.toArray();
        String[] stringArray = Arrays.copyOf(objectArray, objectArray.length, String[].class);
        return stringArray;
    }
    private UniModelingGUI unModeingGUI = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addPropertyValueButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JScrollPane containerScrollPane;
    private javax.swing.JLabel propertyNameLabel;
    private javax.swing.JTextField propertyNameTextField;
    private javax.swing.JComboBox propertyOfComboBox;
    private javax.swing.JLabel propertyOfLabel;
    private javax.swing.JLabel propertyValueLabel;
    private javax.swing.JTextField propertyValueTextField;
    private javax.swing.JList propertyValuesList;
    private javax.swing.JScrollPane propertyValuesScrollPane;
    private javax.swing.JButton removeAllPropertyValuesButton;
    private javax.swing.JButton removePropertyValueButton;
    // End of variables declaration//GEN-END:variables
}
