package info.sarihh.unimodeling.gui;

import com.rits.cloning.Cloner;
import info.sarihh.unimodeling.streamapi.StreamSource;
import info.sarihh.unimodeling.utility.DatabaseConnectionFactory;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * This class creates the internal frame for the RFID server.
 * Author: Sari Haj Hussein
 */
public class ProbabilisticTranslatorFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form RFIDServerFrame
     */
    public ProbabilisticTranslatorFrame(UniModelingGUI uniModelingGUI) {
        this.unModeingGUI = uniModelingGUI;
        initComponents();
        driversComboBox.setSelectedIndex(1);
        registerStreamDialog.pack();
        connectDatabaseDialog.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        registerStreamDialog = new javax.swing.JDialog();
        infoScrollPane = new javax.swing.JScrollPane();
        infoTextArea = new javax.swing.JTextArea();
        streamEncodingScrollPane = new javax.swing.JScrollPane();
        streamEncodingTextArea = new javax.swing.JTextArea();
        buttonPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        connectDatabaseDialog = new javax.swing.JDialog();
        driversLabel = new javax.swing.JLabel();
        driversComboBox = new javax.swing.JComboBox();
        urlLabel = new javax.swing.JLabel();
        urlTextField = new javax.swing.JTextField();
        userNameLabel = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        buttonPanel2 = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        buttonFiller5 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        okButton1 = new javax.swing.JButton();
        containerScrollPane = new javax.swing.JScrollPane();
        containerPanel = new javax.swing.JPanel();
        activityLogScrollPane = new javax.swing.JScrollPane();
        activityLogTextArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        registerStreamButton = new javax.swing.JButton();
        connectDatabaseButton = new javax.swing.JButton();
        createProbTableButton = new javax.swing.JButton();
        startTranslationButton = new javax.swing.JButton();
        endTranslationButton = new javax.swing.JButton();
        clearLogButton = new javax.swing.JButton();

        registerStreamDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("info/sarihh/unimodeling/gui/ProbabilisticTranslatorFrame"); // NOI18N
        registerStreamDialog.setTitle(bundle.getString("ProbabilisticTranslatorFrame.registerStreamDialog.title_1")); // NOI18N
        registerStreamDialog.setModal(true);
        registerStreamDialog.setResizable(false);
        registerStreamDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        infoScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        infoTextArea.setBackground(new java.awt.Color(212, 208, 200));
        infoTextArea.setColumns(45);
        infoTextArea.setEditable(false);
        infoTextArea.setLineWrap(true);
        infoTextArea.setRows(10);
        infoTextArea.setText("Specify a string encoding of the stream information in the form:\nregister stream S (obj-id varchar#reader-id integer#time timestamp#...)\nwhere S is the stream name and obj-id, reader-id, and time are attributes of types varchar, integer, and timestamp respectively.\nThe attributes obj-id, reader-id, and time are mandatory.\nThe first two attributes are used for indexing the in-memory hash structure.\nThe third attribute is used to enforce chronological ordering on stream tuples if possible.\nAn arbitrary number of additional attributes can be specified, and there are no restrictions on their types provided that they are supported by the DBMS that will store their values."); // NOI18N
        infoTextArea.setWrapStyleWord(true);
        infoTextArea.setCaretPosition(0);
        infoScrollPane.setViewportView(infoTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(infoScrollPane, gridBagConstraints);

        streamEncodingScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        streamEncodingTextArea.setColumns(45);
        streamEncodingTextArea.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        streamEncodingTextArea.setLineWrap(true);
        streamEncodingTextArea.setRows(6);
        streamEncodingTextArea.setText("register stream reading (license_plate varchar2(10 byte)#location_id number(20,0)#reading_ts timestamp(3))"); // NOI18N
        streamEncodingTextArea.setWrapStyleWord(true);
        streamEncodingScrollPane.setViewportView(streamEncodingTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(streamEncodingScrollPane, gridBagConstraints);

        okButton.setText(bundle.getString("ProbabilisticTranslatorFrame.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel1.add(okButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        registerStreamDialog.getContentPane().add(buttonPanel1, gridBagConstraints);

        connectDatabaseDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        connectDatabaseDialog.setTitle(bundle.getString("ProbabilisticTranslatorFrame.connectDatabaseDialog.title_1")); // NOI18N
        connectDatabaseDialog.setModal(true);
        connectDatabaseDialog.setResizable(false);
        connectDatabaseDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        driversLabel.setText(bundle.getString("ProbabilisticTranslatorFrame.driversLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(driversLabel, gridBagConstraints);

        driversComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MySQL Driver", "Oracle Thin Driver", "PostgreSQL Driver" }));
        driversComboBox.setPreferredSize(new java.awt.Dimension(360, 22));
        driversComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driversComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(driversComboBox, gridBagConstraints);

        urlLabel.setText(bundle.getString("ProbabilisticTranslatorFrame.urlLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(urlLabel, gridBagConstraints);

        urlTextField.setText("jdbc:mysql://<hostname>[,<failoverhost>][<:3306>]/<dbname>"); // NOI18N
        urlTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(urlTextField, gridBagConstraints);

        userNameLabel.setText(bundle.getString("ProbabilisticTranslatorFrame.userNameLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(userNameLabel, gridBagConstraints);

        userNameTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(userNameTextField, gridBagConstraints);

        passwordLabel.setText(bundle.getString("ProbabilisticTranslatorFrame.passwordLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(passwordLabel, gridBagConstraints);

        passwordTextField.setPreferredSize(new java.awt.Dimension(360, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(passwordTextField, gridBagConstraints);

        testButton.setText(bundle.getString("ProbabilisticTranslatorFrame.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        buttonPanel2.add(testButton);
        buttonPanel2.add(buttonFiller5);

        okButton1.setText(bundle.getString("ProbabilisticTranslatorFrame.okButton1.text")); // NOI18N
        okButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButton1ActionPerformed(evt);
            }
        });
        buttonPanel2.add(okButton1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        connectDatabaseDialog.getContentPane().add(buttonPanel2, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(bundle.getString("ProbabilisticTranslatorFrame.title")); // NOI18N

        containerPanel.setLayout(new java.awt.GridBagLayout());

        activityLogScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("ProbabilisticTranslatorFrame.activityLogScrollPane.border.title"))); // NOI18N
        activityLogScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        activityLogTextArea.setColumns(40);
        activityLogTextArea.setEditable(false);
        activityLogTextArea.setLineWrap(true);
        activityLogTextArea.setRows(12);
        activityLogTextArea.setWrapStyleWord(true);
        activityLogScrollPane.setViewportView(activityLogTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        containerPanel.add(activityLogScrollPane, gridBagConstraints);

        registerStreamButton.setText(bundle.getString("ProbabilisticTranslatorFrame.registerStreamButton.text")); // NOI18N
        registerStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerStreamButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(registerStreamButton);

        connectDatabaseButton.setText(bundle.getString("ProbabilisticTranslatorFrame.connectDatabaseButton.text")); // NOI18N
        connectDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDatabaseButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(connectDatabaseButton);

        createProbTableButton.setText(bundle.getString("ProbabilisticTranslatorFrame.createProbTableButton.text")); // NOI18N
        createProbTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProbTableButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(createProbTableButton);

        startTranslationButton.setText(bundle.getString("ProbabilisticTranslatorFrame.startTranslationButton.text")); // NOI18N
        startTranslationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTranslationButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(startTranslationButton);

        endTranslationButton.setText(bundle.getString("ProbabilisticTranslatorFrame.endTranslationButton.text")); // NOI18N
        endTranslationButton.setEnabled(false);
        endTranslationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTranslationButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(endTranslationButton);

        clearLogButton.setText(bundle.getString("ProbabilisticTranslatorFrame.clearLogButton.text")); // NOI18N
        clearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(clearLogButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        containerPanel.add(buttonPanel, gridBagConstraints);

        containerScrollPane.setViewportView(containerPanel);

        getContentPane().add(containerScrollPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void clearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogButtonActionPerformed
    activityLogTextArea.setText("");
}//GEN-LAST:event_clearLogButtonActionPerformed

private void endTranslationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTranslationButtonActionPerformed
    processingFlag = false;
}//GEN-LAST:event_endTranslationButtonActionPerformed

private void startTranslationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTranslationButtonActionPerformed
    processingFlag = true;
    Thread translatorThread = new Thread() {

        @Override
        public void run() {
            try {
                switchButtonState(endTranslationButton, startTranslationButton);
                String query1 = "SELECT * FROM APPEAR_TABLE ORDER BY LICENSE_PLATE, S_TIME, E_TIME";
                Statement statement1 = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet resultSet = statement1.executeQuery(query1);
                String query2 = "INSERT INTO PROB_TABLE VALUES (?, ?, ?, ?)";
                PreparedStatement statement2 = conn.prepareStatement(query2);
                int counter = 0;
                while (resultSet.next()) {
                    if (processingFlag) {
                        ++counter;
                        if (counter % 1000 == 0) {
                            appendLogText(counter + " appearance records were translated into probabilistic records.");
                        }
                        statement2.setString(1, resultSet.getString("LICENSE_PLATE"));
                        int locationID = resultSet.getInt("LOCATION_ID");
                        switch (locationID) {
                            case 1:
                                statement2.setString(2, "MC:1");
                                break;
                            case 2:
                                statement2.setString(2, "SMC:0.25,TTS:0.75");
                                break;
                            case 62:
                                statement2.setString(2, "CH:0.25,OC:0.25,CGS:0.5");
                                break;
                            case 63:
                                statement2.setString(2, "CH:0.25,OC:0.25,CGS:0.5");
                                break;
                        }
                        statement2.setTimestamp(3, resultSet.getTimestamp("S_TIME"));
                        statement2.setTimestamp(4, resultSet.getTimestamp("E_TIME"));
                        statement2.executeUpdate();
                    } else {
                        break;
                    }
                }
                resultSet.close();
                statement1.close();
                statement2.close();
                switchButtonState(startTranslationButton, endTranslationButton);
                appendLogText("The probabilistic translation ended.");
                appendLogText(counter + " appearance records were probabilistically translated.");
            } catch (SQLException e) {
                for (Throwable t : e) {
                    t.printStackTrace();
                }
                switchButtonState(startTranslationButton, endTranslationButton);
            }
        }
    };
    translatorThread.start();
}//GEN-LAST:event_startTranslationButtonActionPerformed

private void registerStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerStreamButtonActionPerformed
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            registerStreamDialog.setLocationRelativeTo(ProbabilisticTranslatorFrame.this);
            registerStreamDialog.setVisible(true);
        }
    });
}//GEN-LAST:event_registerStreamButtonActionPerformed

private void connectDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDatabaseButtonActionPerformed
    SwingUtilities.invokeLater(new Runnable() {

        public void run() {
            connectDatabaseDialog.setLocationRelativeTo(ProbabilisticTranslatorFrame.this);
            connectDatabaseDialog.setVisible(true);
        }
    });
}//GEN-LAST:event_connectDatabaseButtonActionPerformed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    String streamEncoding = streamEncodingTextArea.getText();
    streamSource.register(streamEncoding);
    registerStreamDialog.setVisible(false);
    appendLogText("The stream " + streamEncoding.substring(16) + " is registered.");
}//GEN-LAST:event_okButtonActionPerformed

private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
    conn = DatabaseConnectionFactory.getDatabaseConnection(
            driversComboBox.getSelectedItem().toString(), urlTextField.getText(),
            userNameTextField.getText(), new String(passwordTextField.getPassword()));
    if (conn != null) {
        JOptionPane.showMessageDialog(ProbabilisticTranslatorFrame.this,
                "Connection succeeded!",
                "UniModeling",
                JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(ProbabilisticTranslatorFrame.this,
                "Connection failed!",
                "UniModeling",
                JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_testButtonActionPerformed

private void okButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButton1ActionPerformed
    conn = DatabaseConnectionFactory.getDatabaseConnection(
            driversComboBox.getSelectedItem().toString(), urlTextField.getText(),
            userNameTextField.getText(), new String(passwordTextField.getPassword()));
    if (conn != null) {
        appendLogText("A connection made with the database: "
                + urlTextField.getText() + " using driver: "
                + driversComboBox.getSelectedItem() + ".");
    } else {
        appendLogText("A connection failed with the database: "
                + urlTextField.getText() + " using driver: "
                + driversComboBox.getSelectedItem() + ".");
    }
    connectDatabaseDialog.setVisible(false);
}//GEN-LAST:event_okButton1ActionPerformed

private void createProbTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProbTableButtonActionPerformed
    createProbTable();
}//GEN-LAST:event_createProbTableButtonActionPerformed

private void driversComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driversComboBoxActionPerformed
    switch (driversComboBox.getSelectedIndex()) {
        case 0:
            urlTextField.setText("jdbc:mysql://<hostname>[,<failoverhost>][<:3306>]/<dbname>");
            userNameTextField.setText("");
            passwordTextField.setText("");
            break;
        case 1:
            urlTextField.setText("jdbc:oracle:thin:@<server>[:<1521>]:<database_name>");
            break;
        case 2:
            urlTextField.setText("jdbc:postgresql:[<//host>[:<5432>/]]<database>");
            userNameTextField.setText("");
            passwordTextField.setText("");
            break;
        default:
            break;
    }
}//GEN-LAST:event_driversComboBoxActionPerformed

    public void appendLogText(final String text) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                if (!text.equals("")) {
                    activityLogTextArea.append(dateFormat.format(new Date()) + " -> " + text + "\n");
                    activityLogTextArea.setCaretPosition(activityLogTextArea.getText().length());
                }
            }
        });
    }

    public StreamSource getStreamSource() {
        return streamSource;
    }

    public Connection getConnection() {
        return conn;
    }

    private void createProbTable() {
        try {
            DatabaseMetaData meta = conn.getMetaData();
            ResultSet resultSet = null;
            String driver = driversComboBox.getSelectedItem().toString();
            if (driver.equals("Oracle Thin Driver")) {
                resultSet = meta.getTables(null, "BAGGAGEQUALITY", null, new String[]{"TABLE"});
            } else {
                resultSet = meta.getTables(null, null, null, new String[]{"TABLE"});
            }
            boolean exist = false;
            while (resultSet.next()) {
                if (resultSet.getString(3).equalsIgnoreCase("PROB_TABLE")) {
                    exist = true;
                    break;
                }
            }
            resultSet.close();

            if (!exist) {
                Cloner cloner = new Cloner();
                HashMap<String, String> streamEncodingMap = cloner.deepClone(streamSource.getStreamEncodingMap());
                String objIDAttributeName = streamSource.getObjIDAttributeName();
                String objIDAttributeType = streamEncodingMap.get(objIDAttributeName);
                String readerIDAttributeName = streamSource.getReaderIDAttributeName();
                String readerIDAttributeType = streamEncodingMap.get(readerIDAttributeName);
                String timeAttributeName = streamSource.getTimeAttributeName();
                streamEncodingMap.remove(objIDAttributeName); // we don't need them anymore in the map
                streamEncodingMap.remove(readerIDAttributeName);
                streamEncodingMap.remove(timeAttributeName);
                StringBuilder sb = new StringBuilder("CREATE TABLE PROB_TABLE (\n");
                sb.append(objIDAttributeName).append(" ").append(objIDAttributeType).append(",\n");
                sb.append("PROB_LOC VARCHAR2(100 BYTE),\n");
                for (String attributeName : streamEncodingMap.keySet()) {
                    sb.append(attributeName).append(" ").append(streamEncodingMap.get(attributeName)).append(",\n");
                }
                sb.append("S_TIME TIMESTAMP (6),\n");
                sb.append("E_TIME TIMESTAMP (6))");
                String query = sb.toString();
                Statement statement = conn.createStatement();
                statement.execute(query);
                statement.close();
                appendLogText("The table PROB_TABLE is created.");
            } else {
                appendLogText("The table PROB_TABLE already exists.");
            }
        } catch (SQLException e) {
            for (Throwable t : e) {
                t.printStackTrace();
            }
        }
    }

    private void switchButtonState(final JButton button1, final JButton button2) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                button1.setEnabled(true);
                button2.setEnabled(false);
            }
        });
    }
    private UniModelingGUI unModeingGUI = null;
    private static Connection conn = null;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private ServerSocket serverSocket;
    private ConcurrentHashMap<Socket, ObjectOutputStream> clientOutputStreams = new ConcurrentHashMap<>();
    private StreamSource streamSource = new StreamSource();
    private boolean processingFlag = true;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane activityLogScrollPane;
    private static javax.swing.JTextArea activityLogTextArea;
    private javax.swing.Box.Filler buttonFiller5;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel buttonPanel1;
    private javax.swing.JPanel buttonPanel2;
    private javax.swing.JButton clearLogButton;
    private javax.swing.JButton connectDatabaseButton;
    private javax.swing.JDialog connectDatabaseDialog;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JScrollPane containerScrollPane;
    private javax.swing.JButton createProbTableButton;
    private javax.swing.JComboBox driversComboBox;
    private javax.swing.JLabel driversLabel;
    private javax.swing.JButton endTranslationButton;
    private javax.swing.JScrollPane infoScrollPane;
    private static javax.swing.JTextArea infoTextArea;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okButton1;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JButton registerStreamButton;
    private javax.swing.JDialog registerStreamDialog;
    private javax.swing.JButton startTranslationButton;
    private javax.swing.JScrollPane streamEncodingScrollPane;
    private static javax.swing.JTextArea streamEncodingTextArea;
    private javax.swing.JButton testButton;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlTextField;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration//GEN-END:variables
}
